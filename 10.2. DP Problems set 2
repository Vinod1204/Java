Q1. Max Sum Without Adjacent Elements:
Given a 2 x N grid of integers, A, your task is to choose numbers from the grid such that sum of these numbers is maximized. 
However, you cannot choose two numbers that are adjacent horizontally, vertically, or diagonally. 

Return the maximum possible sum.

Note: You are allowed to choose more than 2 numbers from the grid.

public class Solution {
    public int adjacent(int[][] A) {
     int n=A.length;
     int m=A[0].length;  
     return adjacentsum(A);
    }
    int adjacentsum(int A[][])
    {
        int n=A[0].length;
        int dp[]=new int[n];
        dp[0]=Math.max(A[0][0],A[1][0]);
        if(n>1)
            dp[1]=Math.max(dp[0],Math.max(A[0][1],A[1][1]));
        for(int i=2;i<n;i++)
        {
            int t=Math.max(A[0][i],A[1][i])+dp[i-2];
            int dt=dp[i-1];
            dp[i]=Math.max(t,dt);
        }
        return dp[n-1];
    }
}

Q2. Unique Paths in a Grid
Given a grid of size n * m, lets assume you are starting at (1,1) and your goal is to reach (n, m). 
At any instance, if you are on (x, y), you can either go to (x, y + 1) or (x + 1, y).

Now consider if some obstacles are added to the grids. 
Return the total number unique paths from (1, 1) to (n, m).

Note: An obstacle is marked as 1 and empty space is marked 0 respectively in the grid.
public class Solution {
    public int uniquePathsWithObstacles(int[][] A) {
        int n=A.length;
        int m=A[0].length;
        int[][] dp=new int[n][m];
        for(int i=0;i<n;i++)
        {
            Arrays.fill(dp[i],-1);
        }
        return ways(n-1,m-1,dp,A);
    }
    int ways(int i,int j,int[][] dp,int[][] A)
    {
        if(i<0 || j<0 || A[i][j]==1) return 0;
        if(A[i][j]!=1 && i==0 && j==0 ) return 1;
        if(dp[i][j]!=-1) return dp[i][j];
        int a=ways(i-1,j,dp,A);
        int b=ways(i,j-1,dp,A);
        dp[i][j]=a+b;
        return dp[i][j];
    }
}

Q3. Min Sum Path in Matrix
Given a M x N grid A of integers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Return the minimum sum of the path.

NOTE: You can only move either down or right at any point in time.

public class Solution {
    public int minPathSum(int[][] A) {
        int n=A.length;
        int m=A[0].length;
        int[][] dp=new int[n][m];
        dp[0][0]=A[0][0];
        for(int j=1;j<m;j++)
        {
            dp[0][j]=dp[0][j-1]+A[0][j];
        }
        for(int i=1;i<n;i++)
        {
            dp[i][0]=dp[i-1][0]+A[i][0];
        }
        for(int i=1;i<n;i++)
        {
            for(int j=1;j<m;j++)
            {
                dp[i][j]=Math.min(dp[i-1][j],dp[i][j-1])+A[i][j];
            }
        }
        return dp[n-1][m-1];
    }

Q4:Min Sum Path in Triangle
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

Adjacent numbers for jth column of ith row is jth and (j+1)th column of (i + 1)th row

public class Solution {
	public int minimumTotal(ArrayList<ArrayList<Integer>> a) {
        for(int i=a.size()-2;i>=0;i--)
        {
            for(int j=a.get(i).size()-1;j>=0;j--)
            {
                int sum=0;
                sum=Math.min(a.get(i+1).get(j),a.get(i+1).get(j+1))+a.get(i).get(j);
                a.get(i).set(j,sum);
            }
        }
        return a.get(0).get(0);
	}
}
