A Java method, also known as a collection of statements that carry out a particular job and return the outcome to the caller, is called a method.
Java methods have the option of carrying out particular tasks without producing any output.
Java's methods let us repurpose code without having to retype it.
In contrast to languages like C, C++, and Python, every method in Java must be a component of a class. 

1. A method is like a function i.e. used to expose the behavior of an object.
2. it is a set of codes that perform a particular task.

Syntax: Declare a method

<access_modifier> <return_type> <method_name>( list_of_parameters)
{
    //body
}

Code Reusability
Code Optimization 

Method Declaration:
Method statements typically consist of six parts:  

1. Modifier:
It specifies the method's access type, or the point in your programme where it can be accessed. 

public: It is accessible in all classes in your application.
protected: It is accessible within the class in which it is defined and in its subclass/es
private: It is accessible only within the class in which it is defined.
default: It is declared/defined without using any modifier. It is accessible within the same class and package within which its class is defined.

2. The return type: 
The data type of the value that the function returned, or void if it returned nothing. It is Mandatory in syntax.

3. Method Name: 
The convention for method names is slightly different, but the rules for field names still hold.

4. Parameter list: 
The input values are listed in a comma-separated format, followed by the data type for each one. 
Empty parentheses must be used if there are no options. ().

5. Exception list:
The method can throw the exceptions you anticipate, and you can define these exceptions.

6. Method body:
it is enclosed between braces. The code you need to be executed to perform your intended operations.

Types of Methods in Java
There are two types of methods in Java:

1. Predefined Method:
Predefined methods in Java refer to the methods that are already defined in the Java class libraries. 
It is also referred to as the built-in or standard library approach. 
These methods can be used by simply calling them within the programme at any time. 

2. User-defined Method: 
A user-defined method is one that has been created by a user or programmer. 
These methods are altered based on the situation.

There are several advantages to using methods in Java, including:

Reusability: Methods make your code more modular and simpler to manage by allowing you to write it once and use it multiple times.

Abstraction: Using methods, you can simplify complicated logic and give users a straightforward interface.
This improves the readability and comprehension of your code.

Improved readability: You can make your code simpler to read and comprehend by segmenting it into smaller, well-named methods.

Encapsulation: Using methods, you can manage and keep complex logic and data more easily.

Separation of concerns:The structure and organisation of your code will be improved by using methods to divide up various sections of your code and give each method a specific task.

Improved modularity: Methods allow you to break up your code into smaller, more manageable units, improving the modularity of your code.

Improved testability: By breaking up your code into smaller, more manageable units, you can make it easier to test and debug your code.

Improved performance: By organizing your code into well-structured methods,
you can improve performance by reducing the amount of code that needs to be executed and by making it easier to cache and optimize your code.
