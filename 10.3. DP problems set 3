Q1. 0-1 Knapsack

Given two integer arrays A and B of size N each which represent values and weights associated with N items respectively.

Also given an integer C which represents knapsack capacity.

Find out the maximum value subset of A such that sum of the weights of this subset is smaller than or equal to C.

NOTE:

You cannot break an item, either pick the complete item, or don’t pick it (0-1 property).

Solution:
public class Solution {
    public int solve(int[] A, int[] B, int C) {
        int n=A.length;
        int[][] dp=new int[n+1][C+1];
        for(int i=0;i<=n;i++)
        {
            dp[i][0]=0;
        }
        for(int j=0;j<=C;j++)
        {
            dp[0][j]=0;
        }
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=C;j++)
            {
                int value=A[i-1];
                int weight=B[i-1];
                int dont=dp[i-1][j];
                int take=0;
                if(j>=weight)
                {
                    take=dp[i-1][j-weight]+value;
                }
                dp[i][j]=Math.max(dont,take);
            }
        }
        return dp[n][C];
    }
}

Q2. Unbounded Knapsack
Given a knapsack weight A and a set of items with certain value B[i] and weight C[i], we need to calculate maximum amount that could fit in this quantity.

This is different from classical Knapsack problem, here we are allowed to use unlimited number of instances of an item.

solution:
public class Solution {
    public int solve(int A, int[] B, int[] C) {
        int n=C.length;
        int[][] dp=new int[n+1][A+1];
        for(int i=0;i<=n;i++)
        {
            dp[i][0]=0;
        }
        for(int j=0;j<=A;j++)
        {
            dp[0][j]=0;
        }
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=A;j++)
            {
                int value=B[i-1];
                int weight=C[i-1];
                int dont=dp[i-1][j];
                int take=0;
                if(j>=weight)
                {
                    take=dp[i][j-weight]+value;
                }
                dp[i][j]=Math.max(dont,take);
            }
        }
        return dp[n][A];
    }
}

Q3. Fractional Knapsack:
Given two integer arrays A and B of size N each which represent values and weights associated with N items respectively.

Also given an integer C which represents knapsack capacity.

Find out the maximum total value that we can fit in the knapsack. If the maximum total value is ans, then return ⌊ans × 100⌋ , i.e., floor of (ans × 100).

NOTE:

You can break an item for maximizing the total value of the knapsack
solution:

public class Solution {
    public class fractional
    {
        int val;
        int wt;
        double r;
        fractional(int v,int w,double r)
        {
            this.val=v;
            this.wt=w;
            this.r=r;
        }
    }
    public int solve(int[] A, int[] B, int C) {
        int n=A.length;
        fractional[] arr=new fractional[A.length];
        for(int i=0;i<n;i++)
        {
            fractional frac=new fractional(A[i],B[i],((A[i]*1.0)/B[i]));
            arr[i]=frac;
        }
        Arrays.sort(arr,new Comparator<fractional>(){
            public int compare(fractional o1,fractional o2){
                if(o1.r>o2.r)
                {
                    return 1;
                } 
                else if(o1.r<o2.r)
                {
                    return -1;
                }
                else{
                    return 0;
                }
        }
        });
        double res=0;
        for(int i=n-1;i>=0;i--)
        {
            if(arr[i].wt<=C)
            {
                res+=arr[i].val;
                C-=arr[i].wt;
            }
            else{
                res+=(arr[i].val*((double)C/arr[i].wt));
                C=0;
                break;
            }
        }
        res*=1000;
        return (int)(res/10);
    }
}

